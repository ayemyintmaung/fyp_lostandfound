{"ast":null,"code":"import axios from 'axios';\nconst token = JSON.parse(localStorage.getItem('token'));\nconst instance = axios.create({\n  baseURL: 'localhost:8081/api/',\n  headers: {\n    'Authorization': \"Bearer \".concat(token)\n  }\n}); // Refresh token jika error 401 / tokennya expired & Logout jika token blacklist atau error 500\n\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Jika response 500 dan juga token tidak bisa di refresh lagi maka akan logout dan masuk ke halaman login\n  if (error.response.status === 500 && error.response.data.error.message === 'Token has expired and can no longer be refreshed') {\n    console.log('token di hapus dan logout kehalaman login');\n    console.log(error.response);\n    localStorage.removeItem('token');\n    return new Promise((resolve, reject) => {\n      // history nya belom bisa ngepush ke halaman cuma linknya doang terupdate\n      // history.push('/login');\n      console.log('redirect ke halaman login');\n      return window.location.href = '/login'; // reject(error);\n    });\n  }\n\n  console.log(error.response); // refresh token jika error 401 dan mesage token has expired\n\n  if (error.response.status === 401 && error.response.data.error.message === 'Token has expired') {\n    console.log('the token must be refreshed');\n    return instance.post('auth/refresh', null).then(res => {\n      const config = error.config;\n      localStorage.removeItem('token');\n      localStorage.setItem('token', JSON.stringify(res.data.token));\n      config.headers['Authorization'] = \"Bearer \".concat(res.data.token);\n      return new Promise((resolve, reject) => {\n        axios.request(config).then(response => {\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }).catch(error => {\n      Promise.reject(error);\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["D:\\@Downloads\\react-redux-login-register-master\\src\\utils\\api.js"],"names":["axios","token","JSON","parse","localStorage","getItem","instance","create","baseURL","headers","interceptors","response","use","error","status","data","message","console","log","removeItem","Promise","resolve","reject","window","location","href","post","then","res","config","setItem","stringify","request","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AAEA,MAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,qBADoB;AAE7BC,EAAAA,OAAO,EAAE;AACR,sCAA2BR,KAA3B;AADQ;AAFoB,CAAb,CAAjB,C,CAOA;;AACAK,QAAQ,CAACI,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CAAoCD,QAAD,IAAc;AAChD,SAAOA,QAAP;AACA,CAFD,EAEIE,KAAD,IAAW;AAEb;AACA,MAAGA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiCD,KAAK,CAACF,QAAN,CAAeI,IAAf,CAAoBF,KAApB,CAA0BG,OAA1B,KAAsC,kDAA1E,EAA8H;AAC7HC,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,QAAlB;AACAP,IAAAA,YAAY,CAACe,UAAb,CAAwB,OAAxB;AAEA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC;AACA;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,aAAOK,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAA9B,CALuC,CAMvC;AACA,KAPM,CAAP;AAQA;;AAEDR,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,QAAlB,EAlBa,CAoBb;;AACA,MAAGE,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiCD,KAAK,CAACF,QAAN,CAAeI,IAAf,CAAoBF,KAApB,CAA0BG,OAA1B,KAAsC,mBAA1E,EAA+F;AAC9FC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,WAAOZ,QAAQ,CAACoB,IAAT,CAAc,cAAd,EAA8B,IAA9B,EACLC,IADK,CACCC,GAAD,IAAS;AACd,YAAMC,MAAM,GAAGhB,KAAK,CAACgB,MAArB;AACAzB,MAAAA,YAAY,CAACe,UAAb,CAAwB,OAAxB;AACAf,MAAAA,YAAY,CAAC0B,OAAb,CAAqB,OAArB,EAA8B5B,IAAI,CAAC6B,SAAL,CAAeH,GAAG,CAACb,IAAJ,CAASd,KAAxB,CAA9B;AACA4B,MAAAA,MAAM,CAACpB,OAAP,CAAe,eAAf,qBAA4CmB,GAAG,CAACb,IAAJ,CAASd,KAArD;AAEA,aAAO,IAAImB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCtB,QAAAA,KAAK,CAACgC,OAAN,CAAcH,MAAd,EAAsBF,IAAtB,CAA2BhB,QAAQ,IAAI;AACtCU,UAAAA,OAAO,CAACV,QAAD,CAAP;AACA,SAFD,EAEGsB,KAFH,CAEUpB,KAAD,IAAW;AACnBS,UAAAA,MAAM,CAACT,KAAD,CAAN;AACA,SAJD;AAKA,OANM,CAAP;AAOA,KAdK,EAeLoB,KAfK,CAeEpB,KAAD,IAAW;AACjBO,MAAAA,OAAO,CAACE,MAAR,CAAeT,KAAf;AACA,KAjBK,CAAP;AAkBA;;AAED,SAAOO,OAAO,CAACE,MAAR,CAAeT,KAAf,CAAP;AACA,CA9CD;AAgDA,eAAeP,QAAf","sourcesContent":["import axios from 'axios';\n\nconst token = JSON.parse(localStorage.getItem('token'));\n\nconst instance = axios.create({\n\tbaseURL: 'localhost:8081/api/',\n\theaders: {\n\t\t'Authorization': `Bearer ${token}`\n\t}\n});\n\n// Refresh token jika error 401 / tokennya expired & Logout jika token blacklist atau error 500\ninstance.interceptors.response.use((response) => {\n\treturn response;\n}, (error) => {\n\n\t// Jika response 500 dan juga token tidak bisa di refresh lagi maka akan logout dan masuk ke halaman login\n\tif(error.response.status === 500 && error.response.data.error.message === 'Token has expired and can no longer be refreshed') {\n\t\tconsole.log('token di hapus dan logout kehalaman login');\n\t\tconsole.log(error.response);\n\t\tlocalStorage.removeItem('token');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// history nya belom bisa ngepush ke halaman cuma linknya doang terupdate\n\t\t\t// history.push('/login');\n\n\t\t\tconsole.log('redirect ke halaman login')\n\t\t\treturn window.location.href = '/login';\n\t\t\t// reject(error);\n\t\t})\n\t}\n\n\tconsole.log(error.response);\n\n\t// refresh token jika error 401 dan mesage token has expired\n\tif(error.response.status === 401 && error.response.data.error.message === 'Token has expired') {\n\t\tconsole.log('the token must be refreshed');\n\t\treturn instance.post('auth/refresh', null)\n\t\t\t.then((res) => {\n\t\t\t\tconst config = error.config;\t\t\t\n\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t\tlocalStorage.setItem('token', JSON.stringify(res.data.token));\n\t\t\t\tconfig.headers['Authorization'] = `Bearer ${res.data.token}`; \n\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\taxios.request(config).then(response => {\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}).catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tPromise.reject(error);\n\t\t\t})\n\t}\n\n\treturn Promise.reject(error);\n})\n\nexport default instance;"]},"metadata":{},"sourceType":"module"}